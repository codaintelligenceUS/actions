{
  "version": 3,
  "sources": ["../dist-src/web.js"],
  "sourcesContent": ["const enc = new TextEncoder();\nfunction hexToUInt8Array(string) {\n  const pairs = string.match(/[\\dA-F]{2}/gi);\n  const integers = pairs.map(function(s) {\n    return parseInt(s, 16);\n  });\n  return new Uint8Array(integers);\n}\nfunction UInt8ArrayToHex(signature) {\n  return Array.prototype.map.call(new Uint8Array(signature), (x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\nasync function importKey(secret) {\n  return crypto.subtle.importKey(\n    \"raw\",\n    // raw format of the key - should be Uint8Array\n    enc.encode(secret),\n    {\n      // algorithm details\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" }\n    },\n    false,\n    // export = false\n    [\"sign\", \"verify\"]\n    // what this key can do\n  );\n}\nasync function sign(secret, payload) {\n  if (!secret || !payload) {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] secret & payload required for sign()\"\n    );\n  }\n  if (typeof payload !== \"string\") {\n    throw new TypeError(\"[@octokit/webhooks-methods] payload must be a string\");\n  }\n  const algorithm = \"sha256\";\n  const signature = await crypto.subtle.sign(\n    \"HMAC\",\n    await importKey(secret),\n    enc.encode(payload)\n  );\n  return `${algorithm}=${UInt8ArrayToHex(signature)}`;\n}\nasync function verify(secret, eventPayload, signature) {\n  if (!secret || !eventPayload || !signature) {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] secret, eventPayload & signature required\"\n    );\n  }\n  if (typeof eventPayload !== \"string\") {\n    throw new TypeError(\n      \"[@octokit/webhooks-methods] eventPayload must be a string\"\n    );\n  }\n  const algorithm = \"sha256\";\n  return await crypto.subtle.verify(\n    \"HMAC\",\n    await importKey(secret),\n    hexToUInt8Array(signature.replace(`${algorithm}=`, \"\")),\n    enc.encode(eventPayload)\n  );\n}\nexport {\n  sign,\n  verify\n};\n"],
  "mappings": ";AAAA,IAAM,MAAM,IAAI,YAAY;AAC5B,SAAS,gBAAgB,QAAQ;AAC/B,QAAM,QAAQ,OAAO,MAAM,cAAc;AACzC,QAAM,WAAW,MAAM,IAAI,SAAS,GAAG;AACrC,WAAO,SAAS,GAAG,EAAE;AAAA,EACvB,CAAC;AACD,SAAO,IAAI,WAAW,QAAQ;AAChC;AACA,SAAS,gBAAgB,WAAW;AAClC,SAAO,MAAM,UAAU,IAAI,KAAK,IAAI,WAAW,SAAS,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAAE,KAAK,EAAE;AAC5G;AACA,eAAe,UAAU,QAAQ;AAC/B,SAAO,OAAO,OAAO;AAAA,IACnB;AAAA;AAAA,IAEA,IAAI,OAAO,MAAM;AAAA,IACjB;AAAA;AAAA,MAEE,MAAM;AAAA,MACN,MAAM,EAAE,MAAM,UAAU;AAAA,IAC1B;AAAA,IACA;AAAA;AAAA,IAEA,CAAC,QAAQ,QAAQ;AAAA;AAAA,EAEnB;AACF;AACA,eAAe,KAAK,QAAQ,SAAS;AACnC,MAAI,CAAC,UAAU,CAAC,SAAS;AACvB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,MAAI,OAAO,YAAY,UAAU;AAC/B,UAAM,IAAI,UAAU,sDAAsD;AAAA,EAC5E;AACA,QAAM,YAAY;AAClB,QAAM,YAAY,MAAM,OAAO,OAAO;AAAA,IACpC;AAAA,IACA,MAAM,UAAU,MAAM;AAAA,IACtB,IAAI,OAAO,OAAO;AAAA,EACpB;AACA,SAAO,GAAG,SAAS,IAAI,gBAAgB,SAAS,CAAC;AACnD;AACA,eAAe,OAAO,QAAQ,cAAc,WAAW;AACrD,MAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW;AAC1C,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,MAAI,OAAO,iBAAiB,UAAU;AACpC,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,QAAM,YAAY;AAClB,SAAO,MAAM,OAAO,OAAO;AAAA,IACzB;AAAA,IACA,MAAM,UAAU,MAAM;AAAA,IACtB,gBAAgB,UAAU,QAAQ,GAAG,SAAS,KAAK,EAAE,CAAC;AAAA,IACtD,IAAI,OAAO,YAAY;AAAA,EACzB;AACF;",
  "names": []
}
